# .github/workflows/release.yml

name: Secure Release Publisher

# This workflow is triggered ONLY when a new release is created in the GitHub UI.
# This provides a manual gate for production releases.
on:
  release:
    types: [created]

# CRITICAL: Define the permissions for the job.
# This enforces the Principle of Least Privilege. The GITHUB_TOKEN will have ONLY these permissions.
permissions:
  contents: read      # Required to check out the repository's code.
  packages: write    # Required to publish packages (Docker images) to GHCR.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Log in to the Container Registry
      # --- CHOOSE ONE OF THE FOLLOWING TWO OPTIONS ---

      # OPTION A: Log in to GitHub Container Registry (GHCR)
      # This is the most secure and integrated method if using GHCR.
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use the auto-generated, scoped token

      # OPTION B: Log in to Docker Hub
      # Uncomment this step if you are using Docker Hub.
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. Generate metadata for the Docker image (tags, labels)
      # This action creates tags based on the Git release version (e.g., v1.0.0)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            # For GHCR, format is ghcr.io/OWNER/REPO_NAME
            ghcr.io/${{ github.repository }}
            # For Docker Hub, format is USERNAME/REPO_NAME
            # kalvinparker/secure-gemini

      # 4. Build and Push the Docker Image
      # This step re-uses our approved, secure Dockerfile. It will run 'npm audit' as a security gate.
      # If the audit fails, this step will fail, and the insecure image will not be published.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
